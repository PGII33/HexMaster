name: Build and Release EXE (Robust)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build exe
        run: |
          # S'assurer que les dossiers requis existent
          if (-not (Test-Path "custom_levels")) { New-Item -ItemType Directory -Path "custom_levels" }
          if (-not (Test-Path "custom_levels/.keep")) { 
            "# Placeholder file" | Out-File -FilePath "custom_levels/.keep" -Encoding UTF8 
          }
          
          Write-Host "Running PyInstaller..."
          pyinstaller main.spec
          
          # V√©rifier que le dossier et l'EXE ont √©t√© cr√©√©s (mode onedir)
          if (-not (Test-Path "dist/HexMaster/HexMaster.exe")) {
            Write-Host "‚ùå Build failed: HexMaster.exe not found in dist/HexMaster/"
            exit 1
          }
          
          # Cr√©er l'archive ZIP pour la distribution
          Write-Host "Creating HexMaster.zip..."
          Compress-Archive -Path "dist/HexMaster/*" -DestinationPath "dist/HexMaster.zip" -Force
          
          $folderSize = (Get-ChildItem "dist/HexMaster" -Recurse | Measure-Object -Property Length -Sum).Sum
          $zipSize = (Get-Item "dist/HexMaster.zip").Length
          Write-Host "‚úÖ Build successful:"
          Write-Host "   - Folder: $([math]::Round($folderSize/1MB, 2)) MB"
          Write-Host "   - ZIP: $([math]::Round($zipSize/1MB, 2)) MB"

      - name: Generate version and release info
        id: version
        run: |
          $timestamp = Get-Date -Format "yyyy.MM.dd.HHmm"
          $version = "v$timestamp"
          $commit_short = "${{ github.sha }}".Substring(0, 7)
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "COMMIT_SHORT=$commit_short" >> $env:GITHUB_OUTPUT
          Write-Host "Generated version: $version"
          Write-Host "Commit short: $commit_short"

      - name: Debug build output
        run: |
          Write-Host "=== Debugging build output ==="
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Contents of current directory:"
          Get-ChildItem -Force | Format-Table Name, Length, LastWriteTime
          
          if (Test-Path "dist") {
            Write-Host "`nContents of dist directory:"
            Get-ChildItem "dist" -Force | Format-Table Name, Length, LastWriteTime
            
            if (Test-Path "dist/HexMaster") {
              Write-Host "`nContents of dist/HexMaster directory:"
              Get-ChildItem "dist/HexMaster" -Force | Format-Table Name, Length, LastWriteTime
            }
          } else {
            Write-Host "`n‚ùå dist directory does not exist"
          }
          
          if (Test-Path "dist/HexMaster/HexMaster.exe") {
            $size = (Get-Item "dist/HexMaster/HexMaster.exe").Length
            Write-Host "`n‚úÖ HexMaster.exe found: $([math]::Round($size/1MB, 2)) MB"
          } else {
            Write-Host "`n‚ùå HexMaster.exe not found"
          }
          
          if (Test-Path "dist/HexMaster.zip") {
            $size = (Get-Item "dist/HexMaster.zip").Length
            Write-Host "`n‚úÖ HexMaster.zip found: $([math]::Round($size/1MB, 2)) MB"
          } else {
            Write-Host "`n‚ùå HexMaster.zip not found"
          }

      - name: Check if release exists
        id: check_release
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          $exists = "false"
          try {
            $headers = @{
              'Authorization' = 'Bearer ${{ secrets.GITHUB_TOKEN }}'
              'Accept' = 'application/vnd.github.v3+json'
            }
            $uri = "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.VERSION }}"
            
            Write-Host "Checking if release ${{ steps.version.outputs.VERSION }} exists..."
            $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get -ErrorAction SilentlyContinue
            if ($response) {
              $exists = "true"
              Write-Host "Release already exists"
            }
          } catch {
            Write-Host "Release does not exist (normal)"
            $exists = "false"
          }
          echo "EXISTS=$exists" >> $env:GITHUB_OUTPUT
          Write-Host "Set EXISTS to: $exists"

      - name: Delete existing release if needed
        if: steps.check_release.outputs.EXISTS == 'true'
        run: |
          $ErrorActionPreference = 'Continue'
          Write-Host "Deleting existing release ${{ steps.version.outputs.VERSION }}"
          $headers = @{
            'Authorization' = 'Bearer ${{ secrets.GITHUB_TOKEN }}'
            'Accept' = 'application/vnd.github.v3+json'
          }
          
          try {
            # Get release info first
            $uri = "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.VERSION }}"
            $release = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
            
            # Delete the release
            $deleteUri = "https://api.github.com/repos/${{ github.repository }}/releases/$($release.id)"
            Invoke-RestMethod -Uri $deleteUri -Headers $headers -Method Delete
            Write-Host "‚úÖ Release deleted"
            
            # Delete the tag
            $tagUri = "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ steps.version.outputs.VERSION }}"
            try {
              Invoke-RestMethod -Uri $tagUri -Headers $headers -Method Delete
              Write-Host "‚úÖ Tag deleted"
            } catch {
              Write-Host "‚ö†Ô∏è Could not delete tag (might not exist): $($_.Exception.Message)"
            }
          } catch {
            Write-Host "‚ö†Ô∏è Error deleting release: $($_.Exception.Message)"
            # Continue anyway, we'll create a new release
          }

      - name: Create new release
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Creating release ${{ steps.version.outputs.VERSION }}..."
          
          # Verify the ZIP exists before proceeding
          if (-not (Test-Path "dist/HexMaster.zip")) {
            Write-Host "‚ùå HexMaster.zip not found in dist/"
            exit 1
          }
          
          $notes = @"
          üéÆ HexMaster - Build automatique
          
          üìÖ Date: $(Get-Date -Format 'dd/MM/yyyy HH:mm')
          üîß Commit: ${{ steps.version.outputs.COMMIT_SHORT }}
          üöÄ Branch: ${{ github.ref_name }}
          
          Comment jouer:
          1. T√©l√©chargez HexMaster.zip ci-dessous
          2. Extrayez l'archive dans un dossier de votre choix
          3. Lancez HexMaster.exe dans le dossier extrait
          4. Amusez-vous bien!
          
          Note: Cette version utilise le mode "onedir" de PyInstaller pour une meilleure compatibilit√©.
          L'archive contient tous les fichiers n√©cessaires au fonctionnement du jeu.
          "@
          
          $headers = @{
            'Authorization' = 'Bearer ${{ secrets.GITHUB_TOKEN }}'
            'Accept' = 'application/vnd.github.v3+json'
            'Content-Type' = 'application/json'
          }
          
          $body = @{
            'tag_name' = '${{ steps.version.outputs.VERSION }}'
            'target_commitish' = '${{ github.sha }}'
            'name' = 'HexMaster ${{ steps.version.outputs.VERSION }}'
            'body' = $notes
            'draft' = $false
            'prerelease' = $false
          } | ConvertTo-Json -Depth 10
          
          $uri = "https://api.github.com/repos/${{ github.repository }}/releases"
          try {
            $release = Invoke-RestMethod -Uri $uri -Headers $headers -Method Post -Body $body
            Write-Host "‚úÖ Release created with ID: $($release.id)"
            
            # Upload the ZIP asset
            Write-Host "Uploading HexMaster.zip..."
            $uploadUri = "https://uploads.github.com/repos/${{ github.repository }}/releases/$($release.id)/assets?name=HexMaster.zip"
            $headers['Content-Type'] = 'application/zip'
            
            $fileBytes = [System.IO.File]::ReadAllBytes("dist/HexMaster.zip")
            $asset = Invoke-RestMethod -Uri $uploadUri -Headers $headers -Method Post -Body $fileBytes
            Write-Host "‚úÖ HexMaster.zip uploaded successfully (ID: $($asset.id))"
          } catch {
            Write-Host "‚ùå Error creating release: $($_.Exception.Message)"
            if ($_.Exception.Response) {
              $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
              $responseBody = $reader.ReadToEnd()
              Write-Host "Response: $responseBody"
            }
            exit 1
          }

      - name: Clean up old releases (safe)
        continue-on-error: true
        run: |
          Write-Host "Starting cleanup of old releases..."
          try {
            $headers = @{
              'Authorization' = 'Bearer ${{ secrets.GITHUB_TOKEN }}'
              'Accept' = 'application/vnd.github.v3+json'
            }
            
            $uri = "https://api.github.com/repos/${{ github.repository }}/releases?per_page=20"
            $releases = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
            
            if ($releases.Count -gt 5) {
              $toDelete = $releases | Sort-Object created_at | Select-Object -First ($releases.Count - 5)
              Write-Host "Found $($toDelete.Count) old releases to delete"
              
              foreach ($release in $toDelete) {
                try {
                  Write-Host "Attempting to delete: $($release.tag_name)"
                  $deleteUri = "https://api.github.com/repos/${{ github.repository }}/releases/$($release.id)"
                  Invoke-RestMethod -Uri $deleteUri -Headers $headers -Method Delete
                  
                  # Try to delete the tag too
                  $tagUri = "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$($release.tag_name)"
                  try {
                    Invoke-RestMethod -Uri $tagUri -Headers $headers -Method Delete
                  } catch {
                    Write-Host "Could not delete tag $($release.tag_name)"
                  }
                  
                  Write-Host "‚úÖ Successfully deleted: $($release.tag_name)"
                } catch {
                  Write-Host "‚ö†Ô∏è Could not delete $($release.tag_name): $($_.Exception.Message)"
                }
              }
            } else {
              Write-Host "Only $($releases.Count) releases found, no cleanup needed"
            }
          } catch {
            Write-Host "‚ö†Ô∏è Cleanup failed but continuing: $($_.Exception.Message)"
          }
