name: Build and Release EXE (Modern)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build exe
        run: |
          # S'assurer que les dossiers requis existent
          if (-not (Test-Path "custom_levels")) { New-Item -ItemType Directory -Path "custom_levels" }
          if (-not (Test-Path "custom_levels/.keep")) { 
            "# Placeholder file" | Out-File -FilePath "custom_levels/.keep" -Encoding UTF8 
          }
          pyinstaller main.spec

      - name: Generate version and release info
        id: version
        run: |
          $timestamp = Get-Date -Format "yyyy.MM.dd.HHmm"
          $version = "v$timestamp"
          $commit_short = "${{ github.sha }}".Substring(0, 7)
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "COMMIT_SHORT=$commit_short" >> $env:GITHUB_OUTPUT
          echo "Generated version: $version"

      - name: Create new release
        run: |
          $notes = @"
          üéÆ HexMaster - Build automatique
          
          üìÖ Date: $(Get-Date -Format 'dd/MM/yyyy HH:mm')
          üîß Commit: ${{ steps.version.outputs.COMMIT_SHORT }}
          üöÄ Branch: ${{ github.ref_name }}
          
          Comment jouer:
          1. T√©l√©chargez HexMaster.exe ci-dessous
          2. Lancez le fichier directement (aucune installation requise)
          3. Amusez-vous bien!
          
          Note: Cette version a √©t√© g√©n√©r√©e automatiquement depuis le dernier code source.
          "@
          
          gh release create ${{ steps.version.outputs.VERSION }} --title "HexMaster ${{ steps.version.outputs.VERSION }}" --notes $notes --latest dist/HexMaster.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old releases
        continue-on-error: true
        run: |
          Write-Host "Starting cleanup of old releases..."
          try {
            $releases = gh release list --limit 20 --json tagName,createdAt | ConvertFrom-Json
            if ($releases.Count -gt 5) {
              $toDelete = $releases | Sort-Object createdAt | Select-Object -First ($releases.Count - 5)
              Write-Host "Found $($toDelete.Count) old releases to delete"
              
              foreach ($release in $toDelete) {
                try {
                  Write-Host "Attempting to delete: $($release.tagName)"
                  gh release delete $release.tagName --yes --cleanup-tag
                  Write-Host "‚úÖ Successfully deleted: $($release.tagName)"
                } catch {
                  Write-Host "‚ö†Ô∏è Could not delete $($release.tagName): $($_.Exception.Message)"
                }
              }
            } else {
              Write-Host "Only $($releases.Count) releases found, no cleanup needed"
            }
          } catch {
            Write-Host "‚ö†Ô∏è Cleanup failed but continuing: $($_.Exception.Message)"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
